{"version":3,"file":"static/js/16.4d18cb31.chunk.js","mappings":"0GAAO,SAASA,EAAOC,GACtB,MAAMC,EACJC,WAAAA,CAAYC,EAAMC,GAAgC,IAAdC,EAAMC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAC,KACzCG,KAAKN,KAAOA,EACZM,KAAKC,YAAc,GACnBD,KAAKJ,OAASA,EACdI,KAAKL,iBAAmBA,EAExBK,KAAKE,eAAiB,KACtBF,KAAKG,eAAiB,KACnBP,GAAUA,EAAOM,gBAAkBN,EAAOO,gBAC5CH,KAAKE,eAAiBN,EAAOM,eAAiBF,KAAKN,KAAKU,KACxDJ,KAAKG,eAAkBH,KAAKN,KAAKU,KAAOR,EAAOM,eAAkBF,KAAKJ,OAAOO,gBAEzEH,KAAKN,MACRM,KAAKE,eAAiBG,EAAYL,KAAKN,KAAKU,KAC5CJ,KAAKM,cAAgBN,KAAKN,KAAKU,KAAKC,IAEpCL,KAAKE,eAAiBG,EACtBL,KAAKG,eAAiB,EAG3B,CAECI,YAAAA,CAAaC,GACZR,KAAKC,YAAYQ,KAAKD,EACvB,EAGF,IAAIH,EAAY,EAKhB,GAJAd,EAAKmB,MAAMC,SAASjB,IACnBW,GAAaX,EAAKU,IAAI,IAGnBb,EAAKmB,MAAMZ,OAAO,GACrB,OAAO,KAER,IACIc,EAGJ,SAASC,EAAeL,EAAMM,GAC7B,GAAgC,IAA5BN,EAAKP,YAAYH,OACpB,OAAOgB,EACD,CAEN,IAAIC,EAASxB,EAAKwB,OAAO,IACpBP,EAAKd,KAGToB,GAAU,GAAGC,GAAUP,EAAKN,eAAeG,IAAcG,EAAKL,eAF9DW,GAAU,EAAEC,EAKb,IAAK,IAAIC,EAAE,EAAGA,EAAER,EAAKP,YAAYH,OAAQkB,IACxCF,EAAQD,EAAeL,EAAKP,YAAYe,GAAIF,GAE7C,OAAOA,CACR,CACD,CApBYD,CAsBZ,SAAmBR,GAElB,IAAIY,EAAY,IAAIzB,EAAS,KAAMD,EAAKmB,MAAO,MAM/C,OAJAQ,EAAqBD,GAIdA,CAER,CAjCgBE,GACsB,GACtC,OAAOP,EAiCP,SAASM,EAAqBV,GACQ,IAAjCA,EAAKb,iBAAiBG,SAGzBsB,QAAQC,IAAIb,EAAKd,MACjBc,EAAKb,iBAAiBgB,SAAQW,IAC7B,IAAIC,EAAe,IAAIf,EAAKb,kBACxB6B,EAAQD,EAAaE,WAAU/B,GAC3BA,EAAKgC,OAASJ,EAAMI,OAExBhC,EAAO6B,EAAaI,OAAOH,EAAM,GAAG,GACpCI,EAAU,IAAIpC,EAASE,EAAM6B,EAAcf,GAC/CA,EAAKD,aAAaqB,GAClBV,EAAqBU,EAAQ,IAGhC,CAgBD,C","sources":["looter/completion-old.js"],"sourcesContent":["export function coupon(data, withPet = false){\n\tclass TreeNode {\n\t  constructor(item, possibleChildren, parent=null) {\n\t    this.item = item;\n\t    this.descendants = [];\n\t    this.parent = parent;\n\t    this.possibleChildren = possibleChildren\n\n\t    this.newTotalWeight = null\n\t    this.cumulativeRate = null\n\t    if(parent && parent.newTotalWeight && parent.cumulativeRate) {\n\t    \tthis.newTotalWeight = parent.newTotalWeight - this.item.rate\n\t    \tthis.cumulativeRate = (this.item.rate / parent.newTotalWeight) * this.parent.cumulativeRate\n\t    } else {\n\t    \tif (this.item) {\n\t    \t\tthis.newTotalWeight = totalRate - this.item.rate\n\t    \t\tthis.cumlativeRate = this.item.rate/totalRate\n\t    \t} else {\n\t    \t\tthis.newTotalWeight = totalRate\n\t    \t\tthis.cumulativeRate = 1\n\t    \t}\n\t    }\n\t\t}\n\n\t  addDecendant(node){\n\t  \tthis.descendants.push(node)\n\t  }\t\n\t}\n\n\tlet totalRate = 0;\n\tdata.items.forEach((item)=> {\n\t\ttotalRate += item.rate\n\t})\n\t//this if factorial growth and explodes around here\n\tif (data.items.length>10){\n\t\treturn null\n\t}\n\tlet startNode = buildTree(totalRate)\n\tlet rolls = calculateRolls(startNode, 0)\n\treturn rolls\n\n\tfunction calculateRolls(node, total){\n\t\tif (node.descendants.length === 0){\n\t\t\treturn total\n\t\t} else {\n\n\t\t\tlet chance = data.chance/100\n\t\t\tif (!node.item) {\n\t\t\t\ttotal += (1/chance)\n\t\t\t} else {\n\t\t\t\ttotal += (1/(chance * (node.newTotalWeight/totalRate)))* node.cumulativeRate\n\t\t\t}\n\n\t\t\tfor (let i=0; i<node.descendants.length; i++){\n\t\t\t\ttotal = calculateRolls(node.descendants[i], total)\n\t\t\t}\n\t\t\treturn total\n\t\t}\n\t}\n\n\tfunction buildTree(totalRate){\n\n\t\tlet startNode = new TreeNode(null, data.items, null)\n\n\t\trecursiveAddChildren(startNode)\n\n\t\t//recursivePrintTree(startNode, 0)\n\n\t\treturn startNode;\n\n\t}\n\n\tfunction recursiveAddChildren(node){\n\t\tif (node.possibleChildren.length === 0){\n\t\t\treturn \n\t\t} else {\n\t\t\tconsole.log(node.item)\n\t\t\tnode.possibleChildren.forEach(child => {\n\t\t\t\tlet childrenCopy = [...node.possibleChildren]\n\t\t\t\tlet index = childrenCopy.findIndex(item => {\n\t\t\t\t\treturn item.name === child.name\n\t\t\t\t})\n\t\t\t\tlet item = childrenCopy.splice(index,1)[0]\n\t\t\t\tlet newNode = new TreeNode(item, childrenCopy, node)\n\t\t\t\tnode.addDecendant(newNode)\n\t\t\t\trecursiveAddChildren(newNode)\n\t\t\t})\n\t\t}\n\t}\n\n\t// function recursivePrintTree(node, index){\n\t// \tindex += 1\n\t// \tconsole.log('Tree depth: ' + index)\n\t// \tconsole.log('Item:' + JSON.stringify(node.item))\n\t// \tconsole.log('Cumulative rate: ' + node.cumulativeRate, node.newTotalWeight)\n\t// \tif (node.descendants.length === 0){\n\t// \t\treturn\n\t// \t} else {\n\t// \t\tfor (let i=0; i<node.descendants.length; i++){\n\t// \t\t\trecursivePrintTree(node.descendants[i], index)\n\t// \t\t}\n\t// \t}\n\t// }\n\n}\n"],"names":["coupon","data","TreeNode","constructor","item","possibleChildren","parent","arguments","length","undefined","this","descendants","newTotalWeight","cumulativeRate","rate","totalRate","cumlativeRate","addDecendant","node","push","items","forEach","rolls","calculateRolls","total","chance","i","startNode","recursiveAddChildren","buildTree","console","log","child","childrenCopy","index","findIndex","name","splice","newNode"],"sourceRoot":""}